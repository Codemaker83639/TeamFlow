version: '3.8'

services:
  # Frontend Service (Vue.js)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000/api
    networks:
      - teamflow-network

  # Backend Service (NestJS)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=teamflow_user
      - POSTGRES_PASSWORD=teamflow_password
      - POSTGRES_DB=teamflow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=24h
      - PORT=3000
      - CLIENT_URL=http://localhost:8080
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - teamflow-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=teamflow_user
      - POSTGRES_PASSWORD=teamflow_password
      - POSTGRES_DB=teamflow
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - teamflow-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - teamflow-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - teamflow-network
    restart: unless-stopped

  # Database administration tool (opcional)
  adminer:
    image: adminer:latest
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - teamflow-network
    restart: unless-stopped

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network configuration
networks:
  teamflow-network:
    driver: bridge
